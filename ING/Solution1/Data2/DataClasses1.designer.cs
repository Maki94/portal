#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Data2
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LeaveDays")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAddress(Address instance);
    partial void UpdateAddress(Address instance);
    partial void DeleteAddress(Address instance);
    partial void InsertTelephone(Telephone instance);
    partial void UpdateTelephone(Telephone instance);
    partial void DeleteTelephone(Telephone instance);
    partial void InsertBonusDaysHistory(BonusDaysHistory instance);
    partial void UpdateBonusDaysHistory(BonusDaysHistory instance);
    partial void DeleteBonusDaysHistory(BonusDaysHistory instance);
    partial void InsertEmail(Email instance);
    partial void UpdateEmail(Email instance);
    partial void DeleteEmail(Email instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertEmployeesKid(EmployeesKid instance);
    partial void UpdateEmployeesKid(EmployeesKid instance);
    partial void DeleteEmployeesKid(EmployeesKid instance);
    partial void InsertEmployeeStatusEnum(EmployeeStatusEnum instance);
    partial void UpdateEmployeeStatusEnum(EmployeeStatusEnum instance);
    partial void DeleteEmployeeStatusEnum(EmployeeStatusEnum instance);
    partial void InsertEmployeeStatusesHistory(EmployeeStatusesHistory instance);
    partial void UpdateEmployeeStatusesHistory(EmployeeStatusesHistory instance);
    partial void DeleteEmployeeStatusesHistory(EmployeeStatusesHistory instance);
    partial void InsertEmployeesTeamsHistory(EmployeesTeamsHistory instance);
    partial void UpdateEmployeesTeamsHistory(EmployeesTeamsHistory instance);
    partial void DeleteEmployeesTeamsHistory(EmployeesTeamsHistory instance);
    partial void InsertHoliday(Holiday instance);
    partial void UpdateHoliday(Holiday instance);
    partial void DeleteHoliday(Holiday instance);
    partial void InsertKid(Kid instance);
    partial void UpdateKid(Kid instance);
    partial void DeleteKid(Kid instance);
    partial void InsertLeave(Leave instance);
    partial void UpdateLeave(Leave instance);
    partial void DeleteLeave(Leave instance);
    partial void InsertLeaveStatusEnum(LeaveStatusEnum instance);
    partial void UpdateLeaveStatusEnum(LeaveStatusEnum instance);
    partial void DeleteLeaveStatusEnum(LeaveStatusEnum instance);
    partial void InsertLeaveStatusesHistory(LeaveStatusesHistory instance);
    partial void UpdateLeaveStatusesHistory(LeaveStatusesHistory instance);
    partial void DeleteLeaveStatusesHistory(LeaveStatusesHistory instance);
    partial void InsertLeavesTypeEnum(LeavesTypeEnum instance);
    partial void UpdateLeavesTypeEnum(LeavesTypeEnum instance);
    partial void DeleteLeavesTypeEnum(LeavesTypeEnum instance);
    partial void InsertPermission(Permission instance);
    partial void UpdatePermission(Permission instance);
    partial void DeletePermission(Permission instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertRolesPermission(RolesPermission instance);
    partial void UpdateRolesPermission(RolesPermission instance);
    partial void DeleteRolesPermission(RolesPermission instance);
    partial void InsertTeam(Team instance);
    partial void UpdateTeam(Team instance);
    partial void DeleteTeam(Team instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::Data2.Properties.Settings.Default.LeaveDaysConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}
		
		public System.Data.Linq.Table<Telephone> Telephones
		{
			get
			{
				return this.GetTable<Telephone>();
			}
		}
		
		public System.Data.Linq.Table<BonusDaysHistory> BonusDaysHistories
		{
			get
			{
				return this.GetTable<BonusDaysHistory>();
			}
		}
		
		public System.Data.Linq.Table<Email> Emails
		{
			get
			{
				return this.GetTable<Email>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<EmployeesKid> EmployeesKids
		{
			get
			{
				return this.GetTable<EmployeesKid>();
			}
		}
		
		public System.Data.Linq.Table<EmployeeStatusEnum> EmployeeStatusEnums
		{
			get
			{
				return this.GetTable<EmployeeStatusEnum>();
			}
		}
		
		public System.Data.Linq.Table<EmployeeStatusesHistory> EmployeeStatusesHistories
		{
			get
			{
				return this.GetTable<EmployeeStatusesHistory>();
			}
		}
		
		public System.Data.Linq.Table<EmployeesTeamsHistory> EmployeesTeamsHistories
		{
			get
			{
				return this.GetTable<EmployeesTeamsHistory>();
			}
		}
		
		public System.Data.Linq.Table<Holiday> Holidays
		{
			get
			{
				return this.GetTable<Holiday>();
			}
		}
		
		public System.Data.Linq.Table<Kid> Kids
		{
			get
			{
				return this.GetTable<Kid>();
			}
		}
		
		public System.Data.Linq.Table<Leave> Leaves
		{
			get
			{
				return this.GetTable<Leave>();
			}
		}
		
		public System.Data.Linq.Table<LeaveStatusEnum> LeaveStatusEnums
		{
			get
			{
				return this.GetTable<LeaveStatusEnum>();
			}
		}
		
		public System.Data.Linq.Table<LeaveStatusesHistory> LeaveStatusesHistories
		{
			get
			{
				return this.GetTable<LeaveStatusesHistory>();
			}
		}
		
		public System.Data.Linq.Table<LeavesTypeEnum> LeavesTypeEnums
		{
			get
			{
				return this.GetTable<LeavesTypeEnum>();
			}
		}
		
		public System.Data.Linq.Table<Permission> Permissions
		{
			get
			{
				return this.GetTable<Permission>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<RolesPermission> RolesPermissions
		{
			get
			{
				return this.GetTable<RolesPermission>();
			}
		}
		
		public System.Data.Linq.Table<Team> Teams
		{
			get
			{
				return this.GetTable<Team>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Addresses")]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _addressID;
		
		private int _employeeID;
		
		private string _address1;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnaddressIDChanging(int value);
    partial void OnaddressIDChanged();
    partial void OnemployeeIDChanging(int value);
    partial void OnemployeeIDChanged();
    partial void Onaddress1Changing(string value);
    partial void Onaddress1Changed();
    #endregion
		
		public Address()
		{
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_addressID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int addressID
		{
			get
			{
				return this._addressID;
			}
			set
			{
				if ((this._addressID != value))
				{
					this.OnaddressIDChanging(value);
					this.SendPropertyChanging();
					this._addressID = value;
					this.SendPropertyChanged("addressID");
					this.OnaddressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_employeeID", DbType="Int NOT NULL")]
		public int employeeID
		{
			get
			{
				return this._employeeID;
			}
			set
			{
				if ((this._employeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnemployeeIDChanging(value);
					this.SendPropertyChanging();
					this._employeeID = value;
					this.SendPropertyChanged("employeeID");
					this.OnemployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="address", Storage="_address1", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string address1
		{
			get
			{
				return this._address1;
			}
			set
			{
				if ((this._address1 != value))
				{
					this.Onaddress1Changing(value);
					this.SendPropertyChanging();
					this._address1 = value;
					this.SendPropertyChanged("address1");
					this.Onaddress1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Address", Storage="_Employee", ThisKey="employeeID", OtherKey="employeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._employeeID = value.employeeID;
					}
					else
					{
						this._employeeID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Telephones")]
	public partial class Telephone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _telephoneID;
		
		private int _employeeID;
		
		private string _telephoneNumber;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntelephoneIDChanging(int value);
    partial void OntelephoneIDChanged();
    partial void OnemployeeIDChanging(int value);
    partial void OnemployeeIDChanged();
    partial void OntelephoneNumberChanging(string value);
    partial void OntelephoneNumberChanged();
    #endregion
		
		public Telephone()
		{
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_telephoneID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int telephoneID
		{
			get
			{
				return this._telephoneID;
			}
			set
			{
				if ((this._telephoneID != value))
				{
					this.OntelephoneIDChanging(value);
					this.SendPropertyChanging();
					this._telephoneID = value;
					this.SendPropertyChanged("telephoneID");
					this.OntelephoneIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_employeeID", DbType="Int NOT NULL")]
		public int employeeID
		{
			get
			{
				return this._employeeID;
			}
			set
			{
				if ((this._employeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnemployeeIDChanging(value);
					this.SendPropertyChanging();
					this._employeeID = value;
					this.SendPropertyChanged("employeeID");
					this.OnemployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_telephoneNumber", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string telephoneNumber
		{
			get
			{
				return this._telephoneNumber;
			}
			set
			{
				if ((this._telephoneNumber != value))
				{
					this.OntelephoneNumberChanging(value);
					this.SendPropertyChanging();
					this._telephoneNumber = value;
					this.SendPropertyChanged("telephoneNumber");
					this.OntelephoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Telephone", Storage="_Employee", ThisKey="employeeID", OtherKey="employeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Telephones.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Telephones.Add(this);
						this._employeeID = value.employeeID;
					}
					else
					{
						this._employeeID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BonusDaysHistory")]
	public partial class BonusDaysHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BonusDayID;
		
		private int _employeeID;
		
		private int _submitterID;
		
		private int _bunusCount;
		
		private System.DateTime _date;
		
		private string _comment;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Employee> _Employee1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBonusDayIDChanging(int value);
    partial void OnBonusDayIDChanged();
    partial void OnemployeeIDChanging(int value);
    partial void OnemployeeIDChanged();
    partial void OnsubmitterIDChanging(int value);
    partial void OnsubmitterIDChanged();
    partial void OnbunusCountChanging(int value);
    partial void OnbunusCountChanged();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    partial void OncommentChanging(string value);
    partial void OncommentChanged();
    #endregion
		
		public BonusDaysHistory()
		{
			this._Employee = default(EntityRef<Employee>);
			this._Employee1 = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BonusDayID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BonusDayID
		{
			get
			{
				return this._BonusDayID;
			}
			set
			{
				if ((this._BonusDayID != value))
				{
					this.OnBonusDayIDChanging(value);
					this.SendPropertyChanging();
					this._BonusDayID = value;
					this.SendPropertyChanged("BonusDayID");
					this.OnBonusDayIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_employeeID", DbType="Int NOT NULL")]
		public int employeeID
		{
			get
			{
				return this._employeeID;
			}
			set
			{
				if ((this._employeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnemployeeIDChanging(value);
					this.SendPropertyChanging();
					this._employeeID = value;
					this.SendPropertyChanged("employeeID");
					this.OnemployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_submitterID", DbType="Int NOT NULL")]
		public int submitterID
		{
			get
			{
				return this._submitterID;
			}
			set
			{
				if ((this._submitterID != value))
				{
					if (this._Employee1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsubmitterIDChanging(value);
					this.SendPropertyChanging();
					this._submitterID = value;
					this.SendPropertyChanged("submitterID");
					this.OnsubmitterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bunusCount", DbType="Int NOT NULL")]
		public int bunusCount
		{
			get
			{
				return this._bunusCount;
			}
			set
			{
				if ((this._bunusCount != value))
				{
					this.OnbunusCountChanging(value);
					this.SendPropertyChanging();
					this._bunusCount = value;
					this.SendPropertyChanged("bunusCount");
					this.OnbunusCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="Date NOT NULL")]
		public System.DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comment", DbType="NVarChar(MAX)")]
		public string comment
		{
			get
			{
				return this._comment;
			}
			set
			{
				if ((this._comment != value))
				{
					this.OncommentChanging(value);
					this.SendPropertyChanging();
					this._comment = value;
					this.SendPropertyChanged("comment");
					this.OncommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_BonusDaysHistory", Storage="_Employee", ThisKey="employeeID", OtherKey="employeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.BonusDaysHistories.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.BonusDaysHistories.Add(this);
						this._employeeID = value.employeeID;
					}
					else
					{
						this._employeeID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_BonusDaysHistory1", Storage="_Employee1", ThisKey="submitterID", OtherKey="employeeID", IsForeignKey=true)]
		public Employee Employee1
		{
			get
			{
				return this._Employee1.Entity;
			}
			set
			{
				Employee previousValue = this._Employee1.Entity;
				if (((previousValue != value) 
							|| (this._Employee1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee1.Entity = null;
						previousValue.BonusDaysHistories1.Remove(this);
					}
					this._Employee1.Entity = value;
					if ((value != null))
					{
						value.BonusDaysHistories1.Add(this);
						this._submitterID = value.employeeID;
					}
					else
					{
						this._submitterID = default(int);
					}
					this.SendPropertyChanged("Employee1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Emails")]
	public partial class Email : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _emailID;
		
		private int _employeeID;
		
		private string _emailAddress;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnemailIDChanging(int value);
    partial void OnemailIDChanged();
    partial void OnemployeeIDChanging(int value);
    partial void OnemployeeIDChanged();
    partial void OnemailAddressChanging(string value);
    partial void OnemailAddressChanged();
    #endregion
		
		public Email()
		{
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_emailID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int emailID
		{
			get
			{
				return this._emailID;
			}
			set
			{
				if ((this._emailID != value))
				{
					this.OnemailIDChanging(value);
					this.SendPropertyChanging();
					this._emailID = value;
					this.SendPropertyChanged("emailID");
					this.OnemailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_employeeID", DbType="Int NOT NULL")]
		public int employeeID
		{
			get
			{
				return this._employeeID;
			}
			set
			{
				if ((this._employeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnemployeeIDChanging(value);
					this.SendPropertyChanging();
					this._employeeID = value;
					this.SendPropertyChanged("employeeID");
					this.OnemployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_emailAddress", DbType="NChar(30) NOT NULL", CanBeNull=false)]
		public string emailAddress
		{
			get
			{
				return this._emailAddress;
			}
			set
			{
				if ((this._emailAddress != value))
				{
					this.OnemailAddressChanging(value);
					this.SendPropertyChanging();
					this._emailAddress = value;
					this.SendPropertyChanged("emailAddress");
					this.OnemailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Email", Storage="_Employee", ThisKey="employeeID", OtherKey="employeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Emails.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Emails.Add(this);
						this._employeeID = value.employeeID;
					}
					else
					{
						this._employeeID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employees")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _employeeID;
		
		private string _firstName;
		
		private string _lastName;
		
		private string _username;
		
		private string _password;
		
		private System.Nullable<System.DateTime> _dateOfBirth;
		
		private int _roleID;
		
		private System.Nullable<System.DateTime> _slava;
		
		private System.Data.Linq.Binary _profilePicture;
		
		private EntitySet<Address> _Addresses;
		
		private EntitySet<Telephone> _Telephones;
		
		private EntitySet<BonusDaysHistory> _BonusDaysHistories;
		
		private EntitySet<BonusDaysHistory> _BonusDaysHistories1;
		
		private EntitySet<Email> _Emails;
		
		private EntitySet<EmployeesKid> _EmployeesKids;
		
		private EntitySet<EmployeeStatusesHistory> _EmployeeStatusesHistories;
		
		private EntitySet<EmployeeStatusesHistory> _EmployeeStatusesHistories1;
		
		private EntitySet<EmployeesTeamsHistory> _EmployeesTeamsHistories;
		
		private EntitySet<Leave> _Leaves;
		
		private EntitySet<LeaveStatusesHistory> _LeaveStatusesHistories;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnemployeeIDChanging(int value);
    partial void OnemployeeIDChanged();
    partial void OnfirstNameChanging(string value);
    partial void OnfirstNameChanged();
    partial void OnlastNameChanging(string value);
    partial void OnlastNameChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OndateOfBirthChanging(System.Nullable<System.DateTime> value);
    partial void OndateOfBirthChanged();
    partial void OnroleIDChanging(int value);
    partial void OnroleIDChanged();
    partial void OnslavaChanging(System.Nullable<System.DateTime> value);
    partial void OnslavaChanged();
    partial void OnprofilePictureChanging(System.Data.Linq.Binary value);
    partial void OnprofilePictureChanged();
    #endregion
		
		public Employee()
		{
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			this._Telephones = new EntitySet<Telephone>(new Action<Telephone>(this.attach_Telephones), new Action<Telephone>(this.detach_Telephones));
			this._BonusDaysHistories = new EntitySet<BonusDaysHistory>(new Action<BonusDaysHistory>(this.attach_BonusDaysHistories), new Action<BonusDaysHistory>(this.detach_BonusDaysHistories));
			this._BonusDaysHistories1 = new EntitySet<BonusDaysHistory>(new Action<BonusDaysHistory>(this.attach_BonusDaysHistories1), new Action<BonusDaysHistory>(this.detach_BonusDaysHistories1));
			this._Emails = new EntitySet<Email>(new Action<Email>(this.attach_Emails), new Action<Email>(this.detach_Emails));
			this._EmployeesKids = new EntitySet<EmployeesKid>(new Action<EmployeesKid>(this.attach_EmployeesKids), new Action<EmployeesKid>(this.detach_EmployeesKids));
			this._EmployeeStatusesHistories = new EntitySet<EmployeeStatusesHistory>(new Action<EmployeeStatusesHistory>(this.attach_EmployeeStatusesHistories), new Action<EmployeeStatusesHistory>(this.detach_EmployeeStatusesHistories));
			this._EmployeeStatusesHistories1 = new EntitySet<EmployeeStatusesHistory>(new Action<EmployeeStatusesHistory>(this.attach_EmployeeStatusesHistories1), new Action<EmployeeStatusesHistory>(this.detach_EmployeeStatusesHistories1));
			this._EmployeesTeamsHistories = new EntitySet<EmployeesTeamsHistory>(new Action<EmployeesTeamsHistory>(this.attach_EmployeesTeamsHistories), new Action<EmployeesTeamsHistory>(this.detach_EmployeesTeamsHistories));
			this._Leaves = new EntitySet<Leave>(new Action<Leave>(this.attach_Leaves), new Action<Leave>(this.detach_Leaves));
			this._LeaveStatusesHistories = new EntitySet<LeaveStatusesHistory>(new Action<LeaveStatusesHistory>(this.attach_LeaveStatusesHistories), new Action<LeaveStatusesHistory>(this.detach_LeaveStatusesHistories));
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_employeeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int employeeID
		{
			get
			{
				return this._employeeID;
			}
			set
			{
				if ((this._employeeID != value))
				{
					this.OnemployeeIDChanging(value);
					this.SendPropertyChanging();
					this._employeeID = value;
					this.SendPropertyChanged("employeeID");
					this.OnemployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_firstName", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string firstName
		{
			get
			{
				return this._firstName;
			}
			set
			{
				if ((this._firstName != value))
				{
					this.OnfirstNameChanging(value);
					this.SendPropertyChanging();
					this._firstName = value;
					this.SendPropertyChanged("firstName");
					this.OnfirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastName", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string lastName
		{
			get
			{
				return this._lastName;
			}
			set
			{
				if ((this._lastName != value))
				{
					this.OnlastNameChanging(value);
					this.SendPropertyChanging();
					this._lastName = value;
					this.SendPropertyChanged("lastName");
					this.OnlastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateOfBirth", DbType="Date")]
		public System.Nullable<System.DateTime> dateOfBirth
		{
			get
			{
				return this._dateOfBirth;
			}
			set
			{
				if ((this._dateOfBirth != value))
				{
					this.OndateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._dateOfBirth = value;
					this.SendPropertyChanged("dateOfBirth");
					this.OndateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roleID", DbType="Int NOT NULL")]
		public int roleID
		{
			get
			{
				return this._roleID;
			}
			set
			{
				if ((this._roleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnroleIDChanging(value);
					this.SendPropertyChanging();
					this._roleID = value;
					this.SendPropertyChanged("roleID");
					this.OnroleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_slava", DbType="Date")]
		public System.Nullable<System.DateTime> slava
		{
			get
			{
				return this._slava;
			}
			set
			{
				if ((this._slava != value))
				{
					this.OnslavaChanging(value);
					this.SendPropertyChanging();
					this._slava = value;
					this.SendPropertyChanged("slava");
					this.OnslavaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_profilePicture", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary profilePicture
		{
			get
			{
				return this._profilePicture;
			}
			set
			{
				if ((this._profilePicture != value))
				{
					this.OnprofilePictureChanging(value);
					this.SendPropertyChanging();
					this._profilePicture = value;
					this.SendPropertyChanged("profilePicture");
					this.OnprofilePictureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Address", Storage="_Addresses", ThisKey="employeeID", OtherKey="employeeID")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Telephone", Storage="_Telephones", ThisKey="employeeID", OtherKey="employeeID")]
		public EntitySet<Telephone> Telephones
		{
			get
			{
				return this._Telephones;
			}
			set
			{
				this._Telephones.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_BonusDaysHistory", Storage="_BonusDaysHistories", ThisKey="employeeID", OtherKey="employeeID")]
		public EntitySet<BonusDaysHistory> BonusDaysHistories
		{
			get
			{
				return this._BonusDaysHistories;
			}
			set
			{
				this._BonusDaysHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_BonusDaysHistory1", Storage="_BonusDaysHistories1", ThisKey="employeeID", OtherKey="submitterID")]
		public EntitySet<BonusDaysHistory> BonusDaysHistories1
		{
			get
			{
				return this._BonusDaysHistories1;
			}
			set
			{
				this._BonusDaysHistories1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Email", Storage="_Emails", ThisKey="employeeID", OtherKey="employeeID")]
		public EntitySet<Email> Emails
		{
			get
			{
				return this._Emails;
			}
			set
			{
				this._Emails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeesKid", Storage="_EmployeesKids", ThisKey="employeeID", OtherKey="employeeID")]
		public EntitySet<EmployeesKid> EmployeesKids
		{
			get
			{
				return this._EmployeesKids;
			}
			set
			{
				this._EmployeesKids.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeeStatusesHistory", Storage="_EmployeeStatusesHistories", ThisKey="employeeID", OtherKey="employeeID")]
		public EntitySet<EmployeeStatusesHistory> EmployeeStatusesHistories
		{
			get
			{
				return this._EmployeeStatusesHistories;
			}
			set
			{
				this._EmployeeStatusesHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeeStatusesHistory1", Storage="_EmployeeStatusesHistories1", ThisKey="employeeID", OtherKey="employeeID")]
		public EntitySet<EmployeeStatusesHistory> EmployeeStatusesHistories1
		{
			get
			{
				return this._EmployeeStatusesHistories1;
			}
			set
			{
				this._EmployeeStatusesHistories1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeesTeamsHistory", Storage="_EmployeesTeamsHistories", ThisKey="employeeID", OtherKey="employeeID")]
		public EntitySet<EmployeesTeamsHistory> EmployeesTeamsHistories
		{
			get
			{
				return this._EmployeesTeamsHistories;
			}
			set
			{
				this._EmployeesTeamsHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Leave", Storage="_Leaves", ThisKey="employeeID", OtherKey="employeeID")]
		public EntitySet<Leave> Leaves
		{
			get
			{
				return this._Leaves;
			}
			set
			{
				this._Leaves.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_LeaveStatusesHistory", Storage="_LeaveStatusesHistories", ThisKey="employeeID", OtherKey="submitterID")]
		public EntitySet<LeaveStatusesHistory> LeaveStatusesHistories
		{
			get
			{
				return this._LeaveStatusesHistories;
			}
			set
			{
				this._LeaveStatusesHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_Employee", Storage="_Role", ThisKey="roleID", OtherKey="roleID", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._roleID = value.roleID;
					}
					else
					{
						this._roleID = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Telephones(Telephone entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Telephones(Telephone entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_BonusDaysHistories(BonusDaysHistory entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_BonusDaysHistories(BonusDaysHistory entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_BonusDaysHistories1(BonusDaysHistory entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = this;
		}
		
		private void detach_BonusDaysHistories1(BonusDaysHistory entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = null;
		}
		
		private void attach_Emails(Email entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Emails(Email entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_EmployeesKids(EmployeesKid entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_EmployeesKids(EmployeesKid entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_EmployeeStatusesHistories(EmployeeStatusesHistory entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_EmployeeStatusesHistories(EmployeeStatusesHistory entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_EmployeeStatusesHistories1(EmployeeStatusesHistory entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = this;
		}
		
		private void detach_EmployeeStatusesHistories1(EmployeeStatusesHistory entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = null;
		}
		
		private void attach_EmployeesTeamsHistories(EmployeesTeamsHistory entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_EmployeesTeamsHistories(EmployeesTeamsHistory entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Leaves(Leave entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Leaves(Leave entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_LeaveStatusesHistories(LeaveStatusesHistory entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_LeaveStatusesHistories(LeaveStatusesHistory entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmployeesKids")]
	public partial class EmployeesKid : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeKidID;
		
		private int _employeeID;
		
		private int _kidID;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Kid> _Kid;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeKidIDChanging(int value);
    partial void OnEmployeeKidIDChanged();
    partial void OnemployeeIDChanging(int value);
    partial void OnemployeeIDChanged();
    partial void OnkidIDChanging(int value);
    partial void OnkidIDChanged();
    #endregion
		
		public EmployeesKid()
		{
			this._Employee = default(EntityRef<Employee>);
			this._Kid = default(EntityRef<Kid>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeKidID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EmployeeKidID
		{
			get
			{
				return this._EmployeeKidID;
			}
			set
			{
				if ((this._EmployeeKidID != value))
				{
					this.OnEmployeeKidIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeKidID = value;
					this.SendPropertyChanged("EmployeeKidID");
					this.OnEmployeeKidIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_employeeID", DbType="Int NOT NULL")]
		public int employeeID
		{
			get
			{
				return this._employeeID;
			}
			set
			{
				if ((this._employeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnemployeeIDChanging(value);
					this.SendPropertyChanging();
					this._employeeID = value;
					this.SendPropertyChanged("employeeID");
					this.OnemployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_kidID", DbType="Int NOT NULL")]
		public int kidID
		{
			get
			{
				return this._kidID;
			}
			set
			{
				if ((this._kidID != value))
				{
					if (this._Kid.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnkidIDChanging(value);
					this.SendPropertyChanging();
					this._kidID = value;
					this.SendPropertyChanged("kidID");
					this.OnkidIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeesKid", Storage="_Employee", ThisKey="employeeID", OtherKey="employeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.EmployeesKids.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.EmployeesKids.Add(this);
						this._employeeID = value.employeeID;
					}
					else
					{
						this._employeeID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Kid_EmployeesKid", Storage="_Kid", ThisKey="kidID", OtherKey="kidID", IsForeignKey=true)]
		public Kid Kid
		{
			get
			{
				return this._Kid.Entity;
			}
			set
			{
				Kid previousValue = this._Kid.Entity;
				if (((previousValue != value) 
							|| (this._Kid.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Kid.Entity = null;
						previousValue.EmployeesKids.Remove(this);
					}
					this._Kid.Entity = value;
					if ((value != null))
					{
						value.EmployeesKids.Add(this);
						this._kidID = value.kidID;
					}
					else
					{
						this._kidID = default(int);
					}
					this.SendPropertyChanged("Kid");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmployeeStatusEnum")]
	public partial class EmployeeStatusEnum : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeStatusEnumID;
		
		private string _EmployeeStatusEnumName;
		
		private EntitySet<EmployeeStatusesHistory> _EmployeeStatusesHistories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeStatusEnumIDChanging(int value);
    partial void OnEmployeeStatusEnumIDChanged();
    partial void OnEmployeeStatusEnumNameChanging(string value);
    partial void OnEmployeeStatusEnumNameChanged();
    #endregion
		
		public EmployeeStatusEnum()
		{
			this._EmployeeStatusesHistories = new EntitySet<EmployeeStatusesHistory>(new Action<EmployeeStatusesHistory>(this.attach_EmployeeStatusesHistories), new Action<EmployeeStatusesHistory>(this.detach_EmployeeStatusesHistories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeStatusEnumID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EmployeeStatusEnumID
		{
			get
			{
				return this._EmployeeStatusEnumID;
			}
			set
			{
				if ((this._EmployeeStatusEnumID != value))
				{
					this.OnEmployeeStatusEnumIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeStatusEnumID = value;
					this.SendPropertyChanged("EmployeeStatusEnumID");
					this.OnEmployeeStatusEnumIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeStatusEnumName", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string EmployeeStatusEnumName
		{
			get
			{
				return this._EmployeeStatusEnumName;
			}
			set
			{
				if ((this._EmployeeStatusEnumName != value))
				{
					this.OnEmployeeStatusEnumNameChanging(value);
					this.SendPropertyChanging();
					this._EmployeeStatusEnumName = value;
					this.SendPropertyChanged("EmployeeStatusEnumName");
					this.OnEmployeeStatusEnumNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmployeeStatusEnum_EmployeeStatusesHistory", Storage="_EmployeeStatusesHistories", ThisKey="EmployeeStatusEnumID", OtherKey="emplyeeStatusEnumID")]
		public EntitySet<EmployeeStatusesHistory> EmployeeStatusesHistories
		{
			get
			{
				return this._EmployeeStatusesHistories;
			}
			set
			{
				this._EmployeeStatusesHistories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmployeeStatusesHistories(EmployeeStatusesHistory entity)
		{
			this.SendPropertyChanging();
			entity.EmployeeStatusEnum = this;
		}
		
		private void detach_EmployeeStatusesHistories(EmployeeStatusesHistory entity)
		{
			this.SendPropertyChanging();
			entity.EmployeeStatusEnum = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmployeeStatusesHistory")]
	public partial class EmployeeStatusesHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _emplyeeStatusHistoryID;
		
		private int _employeeID;
		
		private int _emplyeeStatusEnumID;
		
		private int _submitterID;
		
		private System.DateTime _insertDate;
		
		private string _comment;
		
		private System.DateTime _contractStart;
		
		private System.Nullable<System.DateTime> _contractEnd;
		
		private System.Nullable<int> _contractDuration;
		
		private System.Data.Linq.Binary _filePDF;
		
		private string _fileName;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Employee> _Employee1;
		
		private EntityRef<EmployeeStatusEnum> _EmployeeStatusEnum;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnemplyeeStatusHistoryIDChanging(int value);
    partial void OnemplyeeStatusHistoryIDChanged();
    partial void OnemployeeIDChanging(int value);
    partial void OnemployeeIDChanged();
    partial void OnemplyeeStatusEnumIDChanging(int value);
    partial void OnemplyeeStatusEnumIDChanged();
    partial void OnsubmitterIDChanging(int value);
    partial void OnsubmitterIDChanged();
    partial void OninsertDateChanging(System.DateTime value);
    partial void OninsertDateChanged();
    partial void OncommentChanging(string value);
    partial void OncommentChanged();
    partial void OncontractStartChanging(System.DateTime value);
    partial void OncontractStartChanged();
    partial void OncontractEndChanging(System.Nullable<System.DateTime> value);
    partial void OncontractEndChanged();
    partial void OncontractDurationChanging(System.Nullable<int> value);
    partial void OncontractDurationChanged();
    partial void OnfilePDFChanging(System.Data.Linq.Binary value);
    partial void OnfilePDFChanged();
    partial void OnfileNameChanging(string value);
    partial void OnfileNameChanged();
    #endregion
		
		public EmployeeStatusesHistory()
		{
			this._Employee = default(EntityRef<Employee>);
			this._Employee1 = default(EntityRef<Employee>);
			this._EmployeeStatusEnum = default(EntityRef<EmployeeStatusEnum>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_emplyeeStatusHistoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int emplyeeStatusHistoryID
		{
			get
			{
				return this._emplyeeStatusHistoryID;
			}
			set
			{
				if ((this._emplyeeStatusHistoryID != value))
				{
					this.OnemplyeeStatusHistoryIDChanging(value);
					this.SendPropertyChanging();
					this._emplyeeStatusHistoryID = value;
					this.SendPropertyChanged("emplyeeStatusHistoryID");
					this.OnemplyeeStatusHistoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_employeeID", DbType="Int NOT NULL")]
		public int employeeID
		{
			get
			{
				return this._employeeID;
			}
			set
			{
				if ((this._employeeID != value))
				{
					if ((this._Employee.HasLoadedOrAssignedValue || this._Employee1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnemployeeIDChanging(value);
					this.SendPropertyChanging();
					this._employeeID = value;
					this.SendPropertyChanged("employeeID");
					this.OnemployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_emplyeeStatusEnumID", DbType="Int NOT NULL")]
		public int emplyeeStatusEnumID
		{
			get
			{
				return this._emplyeeStatusEnumID;
			}
			set
			{
				if ((this._emplyeeStatusEnumID != value))
				{
					if (this._EmployeeStatusEnum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnemplyeeStatusEnumIDChanging(value);
					this.SendPropertyChanging();
					this._emplyeeStatusEnumID = value;
					this.SendPropertyChanged("emplyeeStatusEnumID");
					this.OnemplyeeStatusEnumIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_submitterID", DbType="Int NOT NULL")]
		public int submitterID
		{
			get
			{
				return this._submitterID;
			}
			set
			{
				if ((this._submitterID != value))
				{
					this.OnsubmitterIDChanging(value);
					this.SendPropertyChanging();
					this._submitterID = value;
					this.SendPropertyChanged("submitterID");
					this.OnsubmitterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_insertDate", DbType="Date NOT NULL")]
		public System.DateTime insertDate
		{
			get
			{
				return this._insertDate;
			}
			set
			{
				if ((this._insertDate != value))
				{
					this.OninsertDateChanging(value);
					this.SendPropertyChanging();
					this._insertDate = value;
					this.SendPropertyChanged("insertDate");
					this.OninsertDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comment", DbType="NVarChar(MAX)")]
		public string comment
		{
			get
			{
				return this._comment;
			}
			set
			{
				if ((this._comment != value))
				{
					this.OncommentChanging(value);
					this.SendPropertyChanging();
					this._comment = value;
					this.SendPropertyChanged("comment");
					this.OncommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contractStart", DbType="Date NOT NULL")]
		public System.DateTime contractStart
		{
			get
			{
				return this._contractStart;
			}
			set
			{
				if ((this._contractStart != value))
				{
					this.OncontractStartChanging(value);
					this.SendPropertyChanging();
					this._contractStart = value;
					this.SendPropertyChanged("contractStart");
					this.OncontractStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contractEnd", DbType="Date")]
		public System.Nullable<System.DateTime> contractEnd
		{
			get
			{
				return this._contractEnd;
			}
			set
			{
				if ((this._contractEnd != value))
				{
					this.OncontractEndChanging(value);
					this.SendPropertyChanging();
					this._contractEnd = value;
					this.SendPropertyChanged("contractEnd");
					this.OncontractEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contractDuration", DbType="Int")]
		public System.Nullable<int> contractDuration
		{
			get
			{
				return this._contractDuration;
			}
			set
			{
				if ((this._contractDuration != value))
				{
					this.OncontractDurationChanging(value);
					this.SendPropertyChanging();
					this._contractDuration = value;
					this.SendPropertyChanged("contractDuration");
					this.OncontractDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_filePDF", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary filePDF
		{
			get
			{
				return this._filePDF;
			}
			set
			{
				if ((this._filePDF != value))
				{
					this.OnfilePDFChanging(value);
					this.SendPropertyChanging();
					this._filePDF = value;
					this.SendPropertyChanged("filePDF");
					this.OnfilePDFChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fileName", DbType="NChar(100)")]
		public string fileName
		{
			get
			{
				return this._fileName;
			}
			set
			{
				if ((this._fileName != value))
				{
					this.OnfileNameChanging(value);
					this.SendPropertyChanging();
					this._fileName = value;
					this.SendPropertyChanged("fileName");
					this.OnfileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeeStatusesHistory", Storage="_Employee", ThisKey="employeeID", OtherKey="employeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.EmployeeStatusesHistories.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.EmployeeStatusesHistories.Add(this);
						this._employeeID = value.employeeID;
					}
					else
					{
						this._employeeID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeeStatusesHistory1", Storage="_Employee1", ThisKey="employeeID", OtherKey="employeeID", IsForeignKey=true)]
		public Employee Employee1
		{
			get
			{
				return this._Employee1.Entity;
			}
			set
			{
				Employee previousValue = this._Employee1.Entity;
				if (((previousValue != value) 
							|| (this._Employee1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee1.Entity = null;
						previousValue.EmployeeStatusesHistories1.Remove(this);
					}
					this._Employee1.Entity = value;
					if ((value != null))
					{
						value.EmployeeStatusesHistories1.Add(this);
						this._employeeID = value.employeeID;
					}
					else
					{
						this._employeeID = default(int);
					}
					this.SendPropertyChanged("Employee1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmployeeStatusEnum_EmployeeStatusesHistory", Storage="_EmployeeStatusEnum", ThisKey="emplyeeStatusEnumID", OtherKey="EmployeeStatusEnumID", IsForeignKey=true)]
		public EmployeeStatusEnum EmployeeStatusEnum
		{
			get
			{
				return this._EmployeeStatusEnum.Entity;
			}
			set
			{
				EmployeeStatusEnum previousValue = this._EmployeeStatusEnum.Entity;
				if (((previousValue != value) 
							|| (this._EmployeeStatusEnum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmployeeStatusEnum.Entity = null;
						previousValue.EmployeeStatusesHistories.Remove(this);
					}
					this._EmployeeStatusEnum.Entity = value;
					if ((value != null))
					{
						value.EmployeeStatusesHistories.Add(this);
						this._emplyeeStatusEnumID = value.EmployeeStatusEnumID;
					}
					else
					{
						this._emplyeeStatusEnumID = default(int);
					}
					this.SendPropertyChanged("EmployeeStatusEnum");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmployeesTeamsHistory")]
	public partial class EmployeesTeamsHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeTeamID;
		
		private int _employeeID;
		
		private System.DateTime _startDate;
		
		private System.Nullable<System.DateTime> _endDate;
		
		private int _teamID;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Team> _Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeTeamIDChanging(int value);
    partial void OnEmployeeTeamIDChanged();
    partial void OnemployeeIDChanging(int value);
    partial void OnemployeeIDChanged();
    partial void OnstartDateChanging(System.DateTime value);
    partial void OnstartDateChanged();
    partial void OnendDateChanging(System.Nullable<System.DateTime> value);
    partial void OnendDateChanged();
    partial void OnteamIDChanging(int value);
    partial void OnteamIDChanged();
    #endregion
		
		public EmployeesTeamsHistory()
		{
			this._Employee = default(EntityRef<Employee>);
			this._Team = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeTeamID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EmployeeTeamID
		{
			get
			{
				return this._EmployeeTeamID;
			}
			set
			{
				if ((this._EmployeeTeamID != value))
				{
					this.OnEmployeeTeamIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeTeamID = value;
					this.SendPropertyChanged("EmployeeTeamID");
					this.OnEmployeeTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_employeeID", DbType="Int NOT NULL")]
		public int employeeID
		{
			get
			{
				return this._employeeID;
			}
			set
			{
				if ((this._employeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnemployeeIDChanging(value);
					this.SendPropertyChanging();
					this._employeeID = value;
					this.SendPropertyChanged("employeeID");
					this.OnemployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startDate", DbType="Date NOT NULL")]
		public System.DateTime startDate
		{
			get
			{
				return this._startDate;
			}
			set
			{
				if ((this._startDate != value))
				{
					this.OnstartDateChanging(value);
					this.SendPropertyChanging();
					this._startDate = value;
					this.SendPropertyChanged("startDate");
					this.OnstartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_endDate", DbType="Date")]
		public System.Nullable<System.DateTime> endDate
		{
			get
			{
				return this._endDate;
			}
			set
			{
				if ((this._endDate != value))
				{
					this.OnendDateChanging(value);
					this.SendPropertyChanging();
					this._endDate = value;
					this.SendPropertyChanged("endDate");
					this.OnendDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamID", DbType="Int NOT NULL")]
		public int teamID
		{
			get
			{
				return this._teamID;
			}
			set
			{
				if ((this._teamID != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnteamIDChanging(value);
					this.SendPropertyChanging();
					this._teamID = value;
					this.SendPropertyChanged("teamID");
					this.OnteamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeesTeamsHistory", Storage="_Employee", ThisKey="employeeID", OtherKey="employeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.EmployeesTeamsHistories.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.EmployeesTeamsHistories.Add(this);
						this._employeeID = value.employeeID;
					}
					else
					{
						this._employeeID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_EmployeesTeamsHistory", Storage="_Team", ThisKey="teamID", OtherKey="teamID", IsForeignKey=true)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.EmployeesTeamsHistories.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.EmployeesTeamsHistories.Add(this);
						this._teamID = value.teamID;
					}
					else
					{
						this._teamID = default(int);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Holidays")]
	public partial class Holiday : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _holidayID;
		
		private System.DateTime _startDate;
		
		private System.DateTime _endDate;
		
		private bool _sameEveryYear;
		
		private string _name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnholidayIDChanging(int value);
    partial void OnholidayIDChanged();
    partial void OnstartDateChanging(System.DateTime value);
    partial void OnstartDateChanged();
    partial void OnendDateChanging(System.DateTime value);
    partial void OnendDateChanged();
    partial void OnsameEveryYearChanging(bool value);
    partial void OnsameEveryYearChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Holiday()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_holidayID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int holidayID
		{
			get
			{
				return this._holidayID;
			}
			set
			{
				if ((this._holidayID != value))
				{
					this.OnholidayIDChanging(value);
					this.SendPropertyChanging();
					this._holidayID = value;
					this.SendPropertyChanged("holidayID");
					this.OnholidayIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startDate", DbType="Date NOT NULL")]
		public System.DateTime startDate
		{
			get
			{
				return this._startDate;
			}
			set
			{
				if ((this._startDate != value))
				{
					this.OnstartDateChanging(value);
					this.SendPropertyChanging();
					this._startDate = value;
					this.SendPropertyChanged("startDate");
					this.OnstartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_endDate", DbType="Date NOT NULL")]
		public System.DateTime endDate
		{
			get
			{
				return this._endDate;
			}
			set
			{
				if ((this._endDate != value))
				{
					this.OnendDateChanging(value);
					this.SendPropertyChanging();
					this._endDate = value;
					this.SendPropertyChanged("endDate");
					this.OnendDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sameEveryYear", DbType="Bit NOT NULL")]
		public bool sameEveryYear
		{
			get
			{
				return this._sameEveryYear;
			}
			set
			{
				if ((this._sameEveryYear != value))
				{
					this.OnsameEveryYearChanging(value);
					this.SendPropertyChanging();
					this._sameEveryYear = value;
					this.SendPropertyChanged("sameEveryYear");
					this.OnsameEveryYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Kids")]
	public partial class Kid : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _kidID;
		
		private string _name;
		
		private bool _gender;
		
		private System.DateTime _dateOfBirth;
		
		private EntitySet<EmployeesKid> _EmployeesKids;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnkidIDChanging(int value);
    partial void OnkidIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OngenderChanging(bool value);
    partial void OngenderChanged();
    partial void OndateOfBirthChanging(System.DateTime value);
    partial void OndateOfBirthChanged();
    #endregion
		
		public Kid()
		{
			this._EmployeesKids = new EntitySet<EmployeesKid>(new Action<EmployeesKid>(this.attach_EmployeesKids), new Action<EmployeesKid>(this.detach_EmployeesKids));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_kidID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int kidID
		{
			get
			{
				return this._kidID;
			}
			set
			{
				if ((this._kidID != value))
				{
					this.OnkidIDChanging(value);
					this.SendPropertyChanging();
					this._kidID = value;
					this.SendPropertyChanged("kidID");
					this.OnkidIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gender", DbType="Bit NOT NULL")]
		public bool gender
		{
			get
			{
				return this._gender;
			}
			set
			{
				if ((this._gender != value))
				{
					this.OngenderChanging(value);
					this.SendPropertyChanging();
					this._gender = value;
					this.SendPropertyChanged("gender");
					this.OngenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateOfBirth", DbType="Date NOT NULL")]
		public System.DateTime dateOfBirth
		{
			get
			{
				return this._dateOfBirth;
			}
			set
			{
				if ((this._dateOfBirth != value))
				{
					this.OndateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._dateOfBirth = value;
					this.SendPropertyChanged("dateOfBirth");
					this.OndateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Kid_EmployeesKid", Storage="_EmployeesKids", ThisKey="kidID", OtherKey="kidID")]
		public EntitySet<EmployeesKid> EmployeesKids
		{
			get
			{
				return this._EmployeesKids;
			}
			set
			{
				this._EmployeesKids.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmployeesKids(EmployeesKid entity)
		{
			this.SendPropertyChanging();
			entity.Kid = this;
		}
		
		private void detach_EmployeesKids(EmployeesKid entity)
		{
			this.SendPropertyChanging();
			entity.Kid = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Leaves")]
	public partial class Leave : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _leaveID;
		
		private int _employeeID;
		
		private int _typeID;
		
		private System.DateTime _startDate;
		
		private System.DateTime _endDate;
		
		private bool _paid;
		
		private EntitySet<LeaveStatusesHistory> _LeaveStatusesHistories;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<LeavesTypeEnum> _LeavesTypeEnum;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnleaveIDChanging(int value);
    partial void OnleaveIDChanged();
    partial void OnemployeeIDChanging(int value);
    partial void OnemployeeIDChanged();
    partial void OntypeIDChanging(int value);
    partial void OntypeIDChanged();
    partial void OnstartDateChanging(System.DateTime value);
    partial void OnstartDateChanged();
    partial void OnendDateChanging(System.DateTime value);
    partial void OnendDateChanged();
    partial void OnpaidChanging(bool value);
    partial void OnpaidChanged();
    #endregion
		
		public Leave()
		{
			this._LeaveStatusesHistories = new EntitySet<LeaveStatusesHistory>(new Action<LeaveStatusesHistory>(this.attach_LeaveStatusesHistories), new Action<LeaveStatusesHistory>(this.detach_LeaveStatusesHistories));
			this._Employee = default(EntityRef<Employee>);
			this._LeavesTypeEnum = default(EntityRef<LeavesTypeEnum>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_leaveID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int leaveID
		{
			get
			{
				return this._leaveID;
			}
			set
			{
				if ((this._leaveID != value))
				{
					this.OnleaveIDChanging(value);
					this.SendPropertyChanging();
					this._leaveID = value;
					this.SendPropertyChanged("leaveID");
					this.OnleaveIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_employeeID", DbType="Int NOT NULL")]
		public int employeeID
		{
			get
			{
				return this._employeeID;
			}
			set
			{
				if ((this._employeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnemployeeIDChanging(value);
					this.SendPropertyChanging();
					this._employeeID = value;
					this.SendPropertyChanged("employeeID");
					this.OnemployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_typeID", DbType="Int NOT NULL")]
		public int typeID
		{
			get
			{
				return this._typeID;
			}
			set
			{
				if ((this._typeID != value))
				{
					if (this._LeavesTypeEnum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntypeIDChanging(value);
					this.SendPropertyChanging();
					this._typeID = value;
					this.SendPropertyChanged("typeID");
					this.OntypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startDate", DbType="Date NOT NULL")]
		public System.DateTime startDate
		{
			get
			{
				return this._startDate;
			}
			set
			{
				if ((this._startDate != value))
				{
					this.OnstartDateChanging(value);
					this.SendPropertyChanging();
					this._startDate = value;
					this.SendPropertyChanged("startDate");
					this.OnstartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_endDate", DbType="Date NOT NULL")]
		public System.DateTime endDate
		{
			get
			{
				return this._endDate;
			}
			set
			{
				if ((this._endDate != value))
				{
					this.OnendDateChanging(value);
					this.SendPropertyChanging();
					this._endDate = value;
					this.SendPropertyChanged("endDate");
					this.OnendDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_paid", DbType="Bit NOT NULL")]
		public bool paid
		{
			get
			{
				return this._paid;
			}
			set
			{
				if ((this._paid != value))
				{
					this.OnpaidChanging(value);
					this.SendPropertyChanging();
					this._paid = value;
					this.SendPropertyChanged("paid");
					this.OnpaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Leave_LeaveStatusesHistory", Storage="_LeaveStatusesHistories", ThisKey="leaveID", OtherKey="leaveID")]
		public EntitySet<LeaveStatusesHistory> LeaveStatusesHistories
		{
			get
			{
				return this._LeaveStatusesHistories;
			}
			set
			{
				this._LeaveStatusesHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Leave", Storage="_Employee", ThisKey="employeeID", OtherKey="employeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Leaves.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Leaves.Add(this);
						this._employeeID = value.employeeID;
					}
					else
					{
						this._employeeID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeavesTypeEnum_Leave", Storage="_LeavesTypeEnum", ThisKey="typeID", OtherKey="leaveTypeEnumID", IsForeignKey=true)]
		public LeavesTypeEnum LeavesTypeEnum
		{
			get
			{
				return this._LeavesTypeEnum.Entity;
			}
			set
			{
				LeavesTypeEnum previousValue = this._LeavesTypeEnum.Entity;
				if (((previousValue != value) 
							|| (this._LeavesTypeEnum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LeavesTypeEnum.Entity = null;
						previousValue.Leaves.Remove(this);
					}
					this._LeavesTypeEnum.Entity = value;
					if ((value != null))
					{
						value.Leaves.Add(this);
						this._typeID = value.leaveTypeEnumID;
					}
					else
					{
						this._typeID = default(int);
					}
					this.SendPropertyChanged("LeavesTypeEnum");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LeaveStatusesHistories(LeaveStatusesHistory entity)
		{
			this.SendPropertyChanging();
			entity.Leave = this;
		}
		
		private void detach_LeaveStatusesHistories(LeaveStatusesHistory entity)
		{
			this.SendPropertyChanging();
			entity.Leave = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LeaveStatusEnum")]
	public partial class LeaveStatusEnum : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _leaveStatusEnumID;
		
		private string _leaveStatusEnumName;
		
		private EntitySet<LeaveStatusesHistory> _LeaveStatusesHistories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnleaveStatusEnumIDChanging(int value);
    partial void OnleaveStatusEnumIDChanged();
    partial void OnleaveStatusEnumNameChanging(string value);
    partial void OnleaveStatusEnumNameChanged();
    #endregion
		
		public LeaveStatusEnum()
		{
			this._LeaveStatusesHistories = new EntitySet<LeaveStatusesHistory>(new Action<LeaveStatusesHistory>(this.attach_LeaveStatusesHistories), new Action<LeaveStatusesHistory>(this.detach_LeaveStatusesHistories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_leaveStatusEnumID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int leaveStatusEnumID
		{
			get
			{
				return this._leaveStatusEnumID;
			}
			set
			{
				if ((this._leaveStatusEnumID != value))
				{
					this.OnleaveStatusEnumIDChanging(value);
					this.SendPropertyChanging();
					this._leaveStatusEnumID = value;
					this.SendPropertyChanged("leaveStatusEnumID");
					this.OnleaveStatusEnumIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_leaveStatusEnumName", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string leaveStatusEnumName
		{
			get
			{
				return this._leaveStatusEnumName;
			}
			set
			{
				if ((this._leaveStatusEnumName != value))
				{
					this.OnleaveStatusEnumNameChanging(value);
					this.SendPropertyChanging();
					this._leaveStatusEnumName = value;
					this.SendPropertyChanged("leaveStatusEnumName");
					this.OnleaveStatusEnumNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeaveStatusEnum_LeaveStatusesHistory", Storage="_LeaveStatusesHistories", ThisKey="leaveStatusEnumID", OtherKey="leaveStatusEnumID")]
		public EntitySet<LeaveStatusesHistory> LeaveStatusesHistories
		{
			get
			{
				return this._LeaveStatusesHistories;
			}
			set
			{
				this._LeaveStatusesHistories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LeaveStatusesHistories(LeaveStatusesHistory entity)
		{
			this.SendPropertyChanging();
			entity.LeaveStatusEnum = this;
		}
		
		private void detach_LeaveStatusesHistories(LeaveStatusesHistory entity)
		{
			this.SendPropertyChanging();
			entity.LeaveStatusEnum = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LeaveStatusesHistory")]
	public partial class LeaveStatusesHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _leaveStatusHistoryID;
		
		private int _leaveID;
		
		private int _leaveStatusEnumID;
		
		private int _submitterID;
		
		private System.DateTime _startDate;
		
		private System.Nullable<System.DateTime> _endDate;
		
		private string _comment;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Leave> _Leave;
		
		private EntityRef<LeaveStatusEnum> _LeaveStatusEnum;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnleaveStatusHistoryIDChanging(int value);
    partial void OnleaveStatusHistoryIDChanged();
    partial void OnleaveIDChanging(int value);
    partial void OnleaveIDChanged();
    partial void OnleaveStatusEnumIDChanging(int value);
    partial void OnleaveStatusEnumIDChanged();
    partial void OnsubmitterIDChanging(int value);
    partial void OnsubmitterIDChanged();
    partial void OnstartDateChanging(System.DateTime value);
    partial void OnstartDateChanged();
    partial void OnendDateChanging(System.Nullable<System.DateTime> value);
    partial void OnendDateChanged();
    partial void OncommentChanging(string value);
    partial void OncommentChanged();
    #endregion
		
		public LeaveStatusesHistory()
		{
			this._Employee = default(EntityRef<Employee>);
			this._Leave = default(EntityRef<Leave>);
			this._LeaveStatusEnum = default(EntityRef<LeaveStatusEnum>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_leaveStatusHistoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int leaveStatusHistoryID
		{
			get
			{
				return this._leaveStatusHistoryID;
			}
			set
			{
				if ((this._leaveStatusHistoryID != value))
				{
					this.OnleaveStatusHistoryIDChanging(value);
					this.SendPropertyChanging();
					this._leaveStatusHistoryID = value;
					this.SendPropertyChanged("leaveStatusHistoryID");
					this.OnleaveStatusHistoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_leaveID", DbType="Int NOT NULL")]
		public int leaveID
		{
			get
			{
				return this._leaveID;
			}
			set
			{
				if ((this._leaveID != value))
				{
					if (this._Leave.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnleaveIDChanging(value);
					this.SendPropertyChanging();
					this._leaveID = value;
					this.SendPropertyChanged("leaveID");
					this.OnleaveIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_leaveStatusEnumID", DbType="Int NOT NULL")]
		public int leaveStatusEnumID
		{
			get
			{
				return this._leaveStatusEnumID;
			}
			set
			{
				if ((this._leaveStatusEnumID != value))
				{
					if (this._LeaveStatusEnum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnleaveStatusEnumIDChanging(value);
					this.SendPropertyChanging();
					this._leaveStatusEnumID = value;
					this.SendPropertyChanged("leaveStatusEnumID");
					this.OnleaveStatusEnumIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_submitterID", DbType="Int NOT NULL")]
		public int submitterID
		{
			get
			{
				return this._submitterID;
			}
			set
			{
				if ((this._submitterID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsubmitterIDChanging(value);
					this.SendPropertyChanging();
					this._submitterID = value;
					this.SendPropertyChanged("submitterID");
					this.OnsubmitterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startDate", DbType="Date NOT NULL")]
		public System.DateTime startDate
		{
			get
			{
				return this._startDate;
			}
			set
			{
				if ((this._startDate != value))
				{
					this.OnstartDateChanging(value);
					this.SendPropertyChanging();
					this._startDate = value;
					this.SendPropertyChanged("startDate");
					this.OnstartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_endDate", DbType="Date")]
		public System.Nullable<System.DateTime> endDate
		{
			get
			{
				return this._endDate;
			}
			set
			{
				if ((this._endDate != value))
				{
					this.OnendDateChanging(value);
					this.SendPropertyChanging();
					this._endDate = value;
					this.SendPropertyChanged("endDate");
					this.OnendDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comment", DbType="NVarChar(MAX)")]
		public string comment
		{
			get
			{
				return this._comment;
			}
			set
			{
				if ((this._comment != value))
				{
					this.OncommentChanging(value);
					this.SendPropertyChanging();
					this._comment = value;
					this.SendPropertyChanged("comment");
					this.OncommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_LeaveStatusesHistory", Storage="_Employee", ThisKey="submitterID", OtherKey="employeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.LeaveStatusesHistories.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.LeaveStatusesHistories.Add(this);
						this._submitterID = value.employeeID;
					}
					else
					{
						this._submitterID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Leave_LeaveStatusesHistory", Storage="_Leave", ThisKey="leaveID", OtherKey="leaveID", IsForeignKey=true)]
		public Leave Leave
		{
			get
			{
				return this._Leave.Entity;
			}
			set
			{
				Leave previousValue = this._Leave.Entity;
				if (((previousValue != value) 
							|| (this._Leave.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Leave.Entity = null;
						previousValue.LeaveStatusesHistories.Remove(this);
					}
					this._Leave.Entity = value;
					if ((value != null))
					{
						value.LeaveStatusesHistories.Add(this);
						this._leaveID = value.leaveID;
					}
					else
					{
						this._leaveID = default(int);
					}
					this.SendPropertyChanged("Leave");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeaveStatusEnum_LeaveStatusesHistory", Storage="_LeaveStatusEnum", ThisKey="leaveStatusEnumID", OtherKey="leaveStatusEnumID", IsForeignKey=true)]
		public LeaveStatusEnum LeaveStatusEnum
		{
			get
			{
				return this._LeaveStatusEnum.Entity;
			}
			set
			{
				LeaveStatusEnum previousValue = this._LeaveStatusEnum.Entity;
				if (((previousValue != value) 
							|| (this._LeaveStatusEnum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LeaveStatusEnum.Entity = null;
						previousValue.LeaveStatusesHistories.Remove(this);
					}
					this._LeaveStatusEnum.Entity = value;
					if ((value != null))
					{
						value.LeaveStatusesHistories.Add(this);
						this._leaveStatusEnumID = value.leaveStatusEnumID;
					}
					else
					{
						this._leaveStatusEnumID = default(int);
					}
					this.SendPropertyChanged("LeaveStatusEnum");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LeavesTypeEnum")]
	public partial class LeavesTypeEnum : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _leaveTypeEnumID;
		
		private string _leaveTypeEnumName;
		
		private EntitySet<Leave> _Leaves;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnleaveTypeEnumIDChanging(int value);
    partial void OnleaveTypeEnumIDChanged();
    partial void OnleaveTypeEnumNameChanging(string value);
    partial void OnleaveTypeEnumNameChanged();
    #endregion
		
		public LeavesTypeEnum()
		{
			this._Leaves = new EntitySet<Leave>(new Action<Leave>(this.attach_Leaves), new Action<Leave>(this.detach_Leaves));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_leaveTypeEnumID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int leaveTypeEnumID
		{
			get
			{
				return this._leaveTypeEnumID;
			}
			set
			{
				if ((this._leaveTypeEnumID != value))
				{
					this.OnleaveTypeEnumIDChanging(value);
					this.SendPropertyChanging();
					this._leaveTypeEnumID = value;
					this.SendPropertyChanged("leaveTypeEnumID");
					this.OnleaveTypeEnumIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_leaveTypeEnumName", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string leaveTypeEnumName
		{
			get
			{
				return this._leaveTypeEnumName;
			}
			set
			{
				if ((this._leaveTypeEnumName != value))
				{
					this.OnleaveTypeEnumNameChanging(value);
					this.SendPropertyChanging();
					this._leaveTypeEnumName = value;
					this.SendPropertyChanged("leaveTypeEnumName");
					this.OnleaveTypeEnumNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeavesTypeEnum_Leave", Storage="_Leaves", ThisKey="leaveTypeEnumID", OtherKey="typeID")]
		public EntitySet<Leave> Leaves
		{
			get
			{
				return this._Leaves;
			}
			set
			{
				this._Leaves.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Leaves(Leave entity)
		{
			this.SendPropertyChanging();
			entity.LeavesTypeEnum = this;
		}
		
		private void detach_Leaves(Leave entity)
		{
			this.SendPropertyChanging();
			entity.LeavesTypeEnum = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Permissions")]
	public partial class Permission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _permissionID;
		
		private string _name;
		
		private EntitySet<RolesPermission> _RolesPermissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpermissionIDChanging(int value);
    partial void OnpermissionIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Permission()
		{
			this._RolesPermissions = new EntitySet<RolesPermission>(new Action<RolesPermission>(this.attach_RolesPermissions), new Action<RolesPermission>(this.detach_RolesPermissions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_permissionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int permissionID
		{
			get
			{
				return this._permissionID;
			}
			set
			{
				if ((this._permissionID != value))
				{
					this.OnpermissionIDChanging(value);
					this.SendPropertyChanging();
					this._permissionID = value;
					this.SendPropertyChanged("permissionID");
					this.OnpermissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_RolesPermission", Storage="_RolesPermissions", ThisKey="permissionID", OtherKey="premissionID")]
		public EntitySet<RolesPermission> RolesPermissions
		{
			get
			{
				return this._RolesPermissions;
			}
			set
			{
				this._RolesPermissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RolesPermissions(RolesPermission entity)
		{
			this.SendPropertyChanging();
			entity.Permission = this;
		}
		
		private void detach_RolesPermissions(RolesPermission entity)
		{
			this.SendPropertyChanging();
			entity.Permission = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roles")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _roleID;
		
		private string _name;
		
		private EntitySet<Employee> _Employees;
		
		private EntitySet<RolesPermission> _RolesPermissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnroleIDChanging(int value);
    partial void OnroleIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Role()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._RolesPermissions = new EntitySet<RolesPermission>(new Action<RolesPermission>(this.attach_RolesPermissions), new Action<RolesPermission>(this.detach_RolesPermissions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int roleID
		{
			get
			{
				return this._roleID;
			}
			set
			{
				if ((this._roleID != value))
				{
					this.OnroleIDChanging(value);
					this.SendPropertyChanging();
					this._roleID = value;
					this.SendPropertyChanged("roleID");
					this.OnroleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_Employee", Storage="_Employees", ThisKey="roleID", OtherKey="roleID")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_RolesPermission", Storage="_RolesPermissions", ThisKey="roleID", OtherKey="roleID")]
		public EntitySet<RolesPermission> RolesPermissions
		{
			get
			{
				return this._RolesPermissions;
			}
			set
			{
				this._RolesPermissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
		
		private void attach_RolesPermissions(RolesPermission entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_RolesPermissions(RolesPermission entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RolesPermissions")]
	public partial class RolesPermission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RolesPermissionID;
		
		private int _roleID;
		
		private int _premissionID;
		
		private EntityRef<Permission> _Permission;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRolesPermissionIDChanging(int value);
    partial void OnRolesPermissionIDChanged();
    partial void OnroleIDChanging(int value);
    partial void OnroleIDChanged();
    partial void OnpremissionIDChanging(int value);
    partial void OnpremissionIDChanged();
    #endregion
		
		public RolesPermission()
		{
			this._Permission = default(EntityRef<Permission>);
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RolesPermissionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RolesPermissionID
		{
			get
			{
				return this._RolesPermissionID;
			}
			set
			{
				if ((this._RolesPermissionID != value))
				{
					this.OnRolesPermissionIDChanging(value);
					this.SendPropertyChanging();
					this._RolesPermissionID = value;
					this.SendPropertyChanged("RolesPermissionID");
					this.OnRolesPermissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roleID", DbType="Int NOT NULL")]
		public int roleID
		{
			get
			{
				return this._roleID;
			}
			set
			{
				if ((this._roleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnroleIDChanging(value);
					this.SendPropertyChanging();
					this._roleID = value;
					this.SendPropertyChanged("roleID");
					this.OnroleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_premissionID", DbType="Int NOT NULL")]
		public int premissionID
		{
			get
			{
				return this._premissionID;
			}
			set
			{
				if ((this._premissionID != value))
				{
					if (this._Permission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpremissionIDChanging(value);
					this.SendPropertyChanging();
					this._premissionID = value;
					this.SendPropertyChanged("premissionID");
					this.OnpremissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_RolesPermission", Storage="_Permission", ThisKey="premissionID", OtherKey="permissionID", IsForeignKey=true)]
		public Permission Permission
		{
			get
			{
				return this._Permission.Entity;
			}
			set
			{
				Permission previousValue = this._Permission.Entity;
				if (((previousValue != value) 
							|| (this._Permission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Permission.Entity = null;
						previousValue.RolesPermissions.Remove(this);
					}
					this._Permission.Entity = value;
					if ((value != null))
					{
						value.RolesPermissions.Add(this);
						this._premissionID = value.permissionID;
					}
					else
					{
						this._premissionID = default(int);
					}
					this.SendPropertyChanged("Permission");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_RolesPermission", Storage="_Role", ThisKey="roleID", OtherKey="roleID", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.RolesPermissions.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.RolesPermissions.Add(this);
						this._roleID = value.roleID;
					}
					else
					{
						this._roleID = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Teams")]
	public partial class Team : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _teamID;
		
		private string _teamName;
		
		private System.DateTime _creationDate;
		
		private System.Nullable<System.DateTime> _deleteDate;
		
		private EntitySet<EmployeesTeamsHistory> _EmployeesTeamsHistories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnteamIDChanging(int value);
    partial void OnteamIDChanged();
    partial void OnteamNameChanging(string value);
    partial void OnteamNameChanged();
    partial void OncreationDateChanging(System.DateTime value);
    partial void OncreationDateChanged();
    partial void OndeleteDateChanging(System.Nullable<System.DateTime> value);
    partial void OndeleteDateChanged();
    #endregion
		
		public Team()
		{
			this._EmployeesTeamsHistories = new EntitySet<EmployeesTeamsHistory>(new Action<EmployeesTeamsHistory>(this.attach_EmployeesTeamsHistories), new Action<EmployeesTeamsHistory>(this.detach_EmployeesTeamsHistories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int teamID
		{
			get
			{
				return this._teamID;
			}
			set
			{
				if ((this._teamID != value))
				{
					this.OnteamIDChanging(value);
					this.SendPropertyChanging();
					this._teamID = value;
					this.SendPropertyChanged("teamID");
					this.OnteamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamName", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string teamName
		{
			get
			{
				return this._teamName;
			}
			set
			{
				if ((this._teamName != value))
				{
					this.OnteamNameChanging(value);
					this.SendPropertyChanging();
					this._teamName = value;
					this.SendPropertyChanged("teamName");
					this.OnteamNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_creationDate", DbType="Date NOT NULL")]
		public System.DateTime creationDate
		{
			get
			{
				return this._creationDate;
			}
			set
			{
				if ((this._creationDate != value))
				{
					this.OncreationDateChanging(value);
					this.SendPropertyChanging();
					this._creationDate = value;
					this.SendPropertyChanged("creationDate");
					this.OncreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deleteDate", DbType="Date")]
		public System.Nullable<System.DateTime> deleteDate
		{
			get
			{
				return this._deleteDate;
			}
			set
			{
				if ((this._deleteDate != value))
				{
					this.OndeleteDateChanging(value);
					this.SendPropertyChanging();
					this._deleteDate = value;
					this.SendPropertyChanged("deleteDate");
					this.OndeleteDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_EmployeesTeamsHistory", Storage="_EmployeesTeamsHistories", ThisKey="teamID", OtherKey="teamID")]
		public EntitySet<EmployeesTeamsHistory> EmployeesTeamsHistories
		{
			get
			{
				return this._EmployeesTeamsHistories;
			}
			set
			{
				this._EmployeesTeamsHistories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmployeesTeamsHistories(EmployeesTeamsHistory entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_EmployeesTeamsHistories(EmployeesTeamsHistory entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
	}
}
#pragma warning restore 1591
