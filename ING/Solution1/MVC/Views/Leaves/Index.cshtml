@model MVC.Models.LeavePageModel

@using Data2.DTOs;
@using System.Web.Script.Serialization;
@{
    ViewBag.Title = "Index";
}

@{
    int userID = GetUser.EmployeeID();
    bool manager = CheckPermission.CheckUserPermisson((int)Data2.Enums.Permissions.Respond);
}

@{
    List<SelectListItem> statuses = new List<SelectListItem>();
    foreach (var a in Enum.GetValues(typeof(Data2.Enums.leaveStatuses)))
    {
        statuses.Add(new SelectListItem { Text = a.ToString(), Value = ((int)a).ToString() });
    }
}
@{
    List<SelectListItem> teams = new List<SelectListItem>();
    foreach (var a in Data2.Teams.getAllActiveTeams())
    {
        teams.Add(new SelectListItem { Text = a.teamName, Value = a.teamID.ToString() });
    }
}
@{
    List<SelectListItem> types = new List<SelectListItem>();
    foreach (var a in Enum.GetValues(typeof(Data2.Enums.leaveTypes)))
    {
        SelectListItem pom = new SelectListItem { Text = a.ToString(), Value = ((int)a).ToString() };
        if ((int)a == (int)Data2.Enums.leaveTypes.leave)
        {
            pom.Selected = true;
        }
        types.Add(pom);
    }
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.EmpFilter)
    @Html.HiddenFor(model => model.EmpFilter)
    <div class="form-inline filter-container">

        <div class="form-group">
            <h4>Statuses</h4>
            @Html.DropDownListFor(m => m.StatusFilter, statuses, "All statuses")
            @Html.ValidationMessageFor(model => model.StatusFilter)
        </div>
        @if (Model.EmpFilter == null)
        {
            <div class="form-group">
                <h4>Teams</h4>
                @Html.DropDownListFor(m => m.TeamFilter, teams, "All Employees")
                @Html.ValidationMessageFor(model => model.TeamFilter)
            </div>
        }


        <div class="form-group">
            <h4>Types</h4>
            @Html.DropDownListFor(m => m.TypeFilter, types, "All Types")
            @Html.ValidationMessageFor(model => model.TypeFilter)
        </div>

        <div class="form-group">
            <h4>From Date</h4>
            @Html.EditorFor(m => m.StartDateFilter, String.Format("{0:dd-MM-yyyy}", Model.StartDateFilter.HasValue ? Model.StartDateFilter : null), new { htmlAttributes = new { @class = "datePicker" } })
            @Html.ValidationMessageFor(model => model.StartDateFilter, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            <h4>To Date</h4>
            @Html.EditorFor(m => m.EndDateFilter, String.Format("{0:dd-MM-yyyy}", Model.EndDateFilter.HasValue ? Model.EndDateFilter : null), new { htmlAttributes = new { @class = "datePicker" } })
            @Html.ValidationMessageFor(model => model.EndDateFilter, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            <h4>On Date</h4>
            @Html.EditorFor(m => m.OnDateFilter, String.Format("{0:dd-MM-yyyy}", Model.OnDateFilter.HasValue ? Model.OnDateFilter : null), new { htmlAttributes = new { @class = "datePicker" } })
            @Html.ValidationMessageFor(model => model.OnDateFilter, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            <h4>Search</h4>
            @Html.EditorFor(m => m.Search)
        </div>

        <div class="form-group">
            <input type="submit" value="Filter" class="btn btn-default" />
        </div>
        <div class="form-group">
            <p>
                @Html.ActionLink("Restart filters", "Index", new { empFilter = Model.EmpFilter })
            </p>
        </div>
        <input type="button" value="Send request" id="sendRequst-btn" class="green-btn" />

    </div>


    <div class="main-content">

        <div class="table-container">
            @if (Model.leavesList.Count != 0)
            {

            <table class="table">
                <tr>
                    <th class="table-date">
                        <input type="submit" class="btn-link" value="Date" formaction='@Url.Action("Sort", "Leaves", new {sort = "Date"})' />
                    </th>
                    @Html.HiddenFor(m => m.leavesList[0].LeaveID)
                    <th>
                        <input type="submit" class="btn-link" value="Status" formaction='@Url.Action("Sort", "Leaves", new {sort = "Status"})' />
                    </th>
                    @if (Model.EmpFilter == null)
                    {
                        <th class="table-name">
                            <input type="submit" class="btn-link" value="Name" formaction='@Url.Action("Sort", "Leaves", new {sort = "Name"})' />
                        </th>
                    }

                    <th class="table-date">
                        <input type="submit" class="btn-link" value="Start Date" formaction='@Url.Action("Sort", "Leaves", new {sort = "StartDate"})' />
                    </th>
                    <th class="table-date">
                        <input type="submit" class="btn-link" value="End Date" formaction='@Url.Action("Sort", "Leaves", new {sort = "EndDate"})' />
                    </th>
                    <th>
                        <input type="submit" class="btn-link" value="Duration" formaction='@Url.Action("Sort", "Leaves", new {sort = "Duration"})' />
                    </th>
                    <th>
                        <input type="submit" class="btn-link" value="Type" formaction='@Url.Action("Sort", "Leaves", new {sort = "Type"})'/>
                    </th>
                    <th>
                        <input type="submit" class="btn-link" value="Paid" formaction='@Url.Action("Sort", "Leaves", new {sort = "Paid"})' />
                    </th>
                    <th>
                        @Html.DisplayNameFor(m => m.leavesList[0].Comment)
                    </th>
                    <th colspan="5"></th>
                </tr>
                @foreach (LeaveDTO row in Model.leavesList)
                {
                    bool mine = CheckPermission.CheckUserID(row.EmployeeID);
                    bool canCancel = row.Status != (int)Data2.Enums.leaveStatuses.cancelled && row.Status != (int)Data2.Enums.leaveStatuses.rejected;

                    if (manager || Model.EmpFilter != null)
                    {
                        <tr>
                            <td>
                                @Html.DisplayFor(m => row.Date)
                            </td>

                            @Html.HiddenFor(m => row.LeaveID, new { @class = "hiddenID" })
                            @{
                                int t = (int)((Data2.Enums.leaveTypes)Enum.Parse(typeof(Data2.Enums.leaveTypes), row.Type));
                                <input class="typeID" type="hidden" value=@t>
                                <input class="paidID" type="hidden" value=@Convert.ToInt32(row.Paid)>
                            }
                            <td class="status">
                                @{ string s = ((Data2.Enums.leaveStatuses)row.Status).ToString(); }
                                <span class=@s.ToLower()>@s</span>
                            </td>
                            @if (Model.EmpFilter == null)
                            {
                                <td>
                                    <p>@Html.ActionLink(row.FirstName + " " + row.LastName, "Details", "Employees", new { id = row.EmployeeID }, null)</p>
                                    @{
                                        String roleName = ((Data2.Enums.Roles)row.Role).ToString();
                                        String roleClass = roleName.ToLower();
                                    }
                                    <span class=@roleClass>@roleName</span> <span class="table-work-status">at</span> <span class="company-name company-smaller-font">INGSoftware</span>
                                </td>
                                        }

                            <td class="startDateInfo">
                                @Html.DisplayFor(m => row.StartDate)
                            </td>
                            <td class="endDateInfo">
                                @Html.DisplayFor(m => row.EndDate)
                            </td>
                            <td>
                                @Html.DisplayFor(m => row.Duration)
                            </td>
                            <td class="leaveType">
                                @Html.DisplayFor(m => row.Type)
                            </td>
                            <td class="leaveType">
                                @((Data2.Enums.paid)Convert.ToInt32(row.Paid))
                            </td>

                            <td class="comment">
                                <div class="table-data-content" id="table-data-content">
                                    <div class="td-subcontent">
                                        <p class="commentInfo">@row.Comment</p>
                                    </div>
                                    <span class="plus">+</span>
                                </div>
                            </td>

                            <td>
                                @Html.ActionLink("PDF", "CreatePDF", new { id = row.LeaveID })
                            </td>
                            <td>

                                @Html.ActionLink("History", "History", new { id = row.LeaveID })
                            </td>
                            @if (row.StartDate > DateTime.Today)
                            {
                                if (!mine)
                                {
                                    if (manager && row.Status == (int)Data2.Enums.leaveStatuses.pending)
                                    {
                                        <td>
                                            <p>
                                                <input type="button" value="Respond" class="green-btn respond" onclick="location.href = '@Url.Action("Respond", "Leaves", new {leaveID = row.LeaveID})'" />
                                            </p>
                                        </td>
                                    }
                                    else
                                    {
                                        <td colspan="2"></td>
                                    }
                                }
                                else
                                {
                                    if (canCancel)
                                    {
                                        <td>

                                            <input type="button" value="Cancel" class="respond cancelRequest" onclick="location.href = '@Url.Action("Cancel", "Leaves", new {leaveID = row.LeaveID})'" />

                                        </td>
                                        if (row.Status == (int)Data2.Enums.leaveStatuses.pending)
                                        {
                                            <td>
                                                <p>
                                                    <a id="edit-btn" class="edit edit-leave-btn" href="#"><span>Edit</span></a>
                                                </p>
                                            </td>
                                        }

                                    }
                                    else
                                    {
                                        <td colspan="2"></td>
                                    }
                                }
                            }
                            else
                            {
                                <td colspan="5"></td>
                            }

                        </tr>
                                            }
                                        }
            </table>


            <!--end main-content-->
            }
            else
            {
            <h4>There are no results that match your search.</h4>
            }
        </div>
    </div>
                                        }
<div class="dialog dialogContainer" id="dialogEdit" title="SEND REQUEST">
    @using (Html.BeginForm("SendRequest", "Leaves", FormMethod.Post))
    {

        Html.RenderPartial("SendRequest", new MVC.Models.SendRequestModel());
    }

</div>





