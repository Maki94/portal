@model MVC.Models.EmployeePageModel
@using Data2.DTOs
@using Data2

@{
    ViewBag.Title = "Index";
}

@{
    Boolean manager = CheckPermission.CheckUserPermisson((int)Enums.Permissions.EditEmp);
}

@{
    List<SelectListItem> statuses = new List<SelectListItem>();
    foreach (var a in Enum.GetValues(typeof(Data2.Enums.employeeStatus)))
    {
        statuses.Add(new SelectListItem { Text = a.ToString(), Value = ((int)a).ToString() });
    }
}
@{
    List<SelectListItem> teams = new List<SelectListItem>();
    foreach (var a in Data2.Teams.getAllActiveTeams())
    {
        teams.Add(new SelectListItem { Text = a.teamName, Value = a.teamID.ToString() });
    }
    teams.Add(new SelectListItem { Text = "sans team", Value = int.MaxValue.ToString() });
}

@{
    List<SelectListItem> onVicationList = new List<SelectListItem>();
    onVicationList.Add(new SelectListItem { Text = "Working now", Value = false.ToString() });
    onVicationList.Add(new SelectListItem { Text = "On vacation", Value = true.ToString() });
}

@{
    List<SelectListItem> roles = new List<SelectListItem>();
    foreach (var a in Enum.GetValues(typeof(Data2.Enums.Roles)))
    {
        roles.Add(new SelectListItem { Text = a.ToString(), Value = ((int)a).ToString() });
    }
}



@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-inline filter-container">

        <div class="form-group">
            <h4>Statuses</h4>
            @Html.DropDownListFor(m => m.StatusFilter, statuses, "All statuses")
            @Html.ValidationMessageFor(model => model.StatusFilter)
        </div>

        <div class="form-group">
            <h4>Teams</h4>
            @Html.DropDownListFor(m => m.TeamFilter, teams, "All Employees")
            @Html.ValidationMessageFor(model => model.TeamFilter)
        </div>

        <div class="form-group">
            <h4>On leave</h4>
            @Html.DropDownListFor(m => m.onHoliday, onVicationList, "All Employees")
            @Html.ValidationMessageFor(model => model.onHoliday)
        </div>
        <div class="form-group">
            <h4>Roles</h4>
            @Html.DropDownListFor(m => m.RoleFilter, roles, "All Employees")
            @Html.ValidationMessageFor(model => model.RoleFilter)
        </div>

        <div class="form-group">
            <h4>Search</h4>
            @Html.EditorFor(m => m.Search)
        </div>

        <div class="form-group">
            <input type="submit" value="Filter" class="btn btn-default" />
        </div>

        <div class="form-group">
            <p>@Html.ActionLink("Restart filters", "Index")</p>
        </div>


        @if (Model.TeamFilter != null && Data2.Teams.getTeamAt(Model.TeamFilter.Value).deleteDate == null)
        {

            @Html.HiddenFor(m => m.TeamFilter, new { @class = "teamFilter" })
            <input type="button" value="Add employee to team" class="green-btn addEmpToTeam-btn" />
        }
        else
        {
            <input type="button" value="Add Employee" class="green-btn addEmployee-btn" />
        }

    </div><!--filters-->

    <div class="main-content">
        <div class="table-container">

            @if (Model.EmpsList.Count > 0)
            {
                <table class="table">
                    <tr>
                        <th>
                            <input type="submit" class="btn-link" value="Status" formaction='@Url.Action("Sort", "Employees", new {sort = "Status"})' />
                        </th>
                        <th class="table-name">
                            <input type="submit" class="btn-link" value="Name" formaction='@Url.Action("Sort", "Employees", new {sort = "Name"})' />
                            <span class="tab"></span>
                            <input type="submit" class="btn-link" value="Role" formaction='@Url.Action("Sort", "Employees", new {sort = "Role"})' />
                        </th>
                        <th>
                            <input type="submit" class="btn-link" value="Leave Days Number" formaction='@Url.Action("Sort", "Employees", new {sort = "LDN"})'/>
                        </th>
                        <th colspan="5">
                            </th>
            </tr>

                    @foreach (EmployeePageDTO emp in Model.EmpsList)
                    {
                        Boolean mine = CheckPermission.CheckUserID(emp.EmployeeID);
                        <tr>
                            <td>
                                @(((Enums.employeeStatus) emp.Status).ToString())
                            </td>
                         
                            @Html.HiddenFor(m => emp.EmployeeID)

                            <td>
                                <p>@Html.ActionLink(emp.FirstName + " " + emp.LastName, "Details", "Employees", new { id = emp.EmployeeID }, null)</p>
                                @{
                                    String roleName = ((Enums.Roles)emp.Role).ToString();
                                    String roleClass = roleName.ToLower();
                                }
                                <span class=@roleClass>@roleName</span> <span class="table-work-status">at</span> <span class="company-name company-smaller-font">INGSoftware</span>
                            </td>

                            @if (mine || manager)
                            {
                                <td>
                                    @Html.ActionLink(emp.LeaveDaysNum.ToString(), "CalculateLeaveDays", "Employees", new { id = emp.EmployeeID }, null)
                                </td>
                            }
                            else
                            {
                                <td>
                                    @Html.DisplayFor(m => emp.LeaveDaysNum)
                                </td>
                            }

                            <td>
                                @Html.ActionLink("Leaves", "Index", "Leaves", new { empFilter = emp.EmployeeID }, null)
                            </td>

                            <td>
                                @Html.ActionLink("Teams", "TeamsOfEmployee", "Teams", new { id = emp.EmployeeID }, null)
                            </td>

                            <td colspan="2">
                                @Html.ActionLink("History", "History", new { id = emp.EmployeeID })
                            </td>

                            @if (Model.TeamFilter != null)
                            {
                                <td>
                                    @Html.ActionLink("Remove from team", "RemoveEmployee", "Teams", new { teamID = Model.TeamFilter, empID = emp.EmployeeID }, new { @class = "red" })
                                </td>
                            }
                           
                        </tr>
                    }

                </table>

                }
                else
                {

                    <h4> There are no results that match your search.</h4>     
                         

                }

        </div>
    </div>

}

<div class="dialog dialogContainer addEmployeeDialog" title="ADD EMPLOYEE">
    @using (Html.BeginForm("AddEmployee", "Employees", FormMethod.Post))
    {
        Html.RenderPartial("AddEmployee", new EmployeeDTO());
    }
</div>

<div id="dialogAddEmployeeToTeam" class ="dialogContainer" title="ADD EMPLOYEE TO TEAM">
    @using (Html.BeginForm("AddEmployeeToTeam", "Teams", FormMethod.Post))
    {
        Html.RenderPartial("~/Views/Teams/AddEmployeeToTeam.cshtml", new MVC.Models.EmpToTeamModel());
    }
</div>