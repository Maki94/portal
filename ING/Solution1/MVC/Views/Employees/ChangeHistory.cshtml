@model Data2.DTOs.EmployeeStatusDTO

@{
    ViewBag.Title = "ChangeHistory";
    Layout = null;
}


@{
    List<SelectListItem> statuses = new List<SelectListItem>();
    foreach (var a in Enum.GetValues(typeof(Data2.Enums.employeeStatus)))
    {
        SelectListItem pom = new SelectListItem {Text = a.ToString(), Value = ((int) a).ToString()};
        if ((int)a != Model.Status)
        {
            pom.Selected = true;
        }
        statuses.Add(pom);

    }
}


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
       
        @Html.HiddenFor(model=>model.StatusID)
        @Html.HiddenFor(model=>model.EmployeeID)
        @Html.HiddenFor(model=>model.InsertDate)
        @Html.HiddenFor(model=>model.SubmitterID)
        @Html.HiddenFor(model=>model.SubmitterName)

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Status)
                @Html.DropDownListFor(model=>model.Status,statuses)
                @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StartDate)
            @Html.EditorFor(model => model.StartDate, new {htmlAttributes = new {@class = " datePicker"}})
            @Html.ValidationMessageFor(model => model.StartDate, "", new {@class = "text-danger"})
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ContractDuration)
            @Html.EditorFor(model => model.ContractDuration)
            @Html.ValidationMessageFor(model => model.ContractDuration, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EndDate)
                @Html.EditorFor(model => model.EndDate, new { htmlAttributes = new { @class = " datePicker" } })
                @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.comment)
                @Html.EditorFor(model => model.comment)
                @Html.ValidationMessageFor(model => model.comment, "", new { @class = "text-danger" })
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.FileName)
                @Html.EditorFor(model => model.FileName)
                @Html.ValidationMessageFor(model => model.FileName, "", new {@class = "text-danger"})
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.File)
                <input name="fileUploader" type="file"/>
        </div>
        <input class="bottom-button diagram-submit " type="submit" value="Create" />
        <a href="" class="bottom-button cancel-button">Cancel</a>

    </div>
}

