@model MVC.Models.MemberListModel

@{
    ViewBag.Title = "Messenger";
}
<div id="messenger-header">
    <div class="mdl-grid">
        <div class="mdl-cell mdl-cell--1-col mdl-cell--1-col-tablet mdl-cell--1-col-phone"></div>
        <div class="mdl-cell mdl-cell--9-col mdl-cell--6-col-tablet mdl-cell--2-col-phone">
            <div class="" id="messenger-message-wrapper">
                <input placeholder="Tekst poruke" class="mdl-textfield__input" type="text" id="messenger-message">
            </div>
        </div>
        <div class="mdl-cell mdl-cell--1-col mdl-cell--1-col-tablet mdl-cell--1-col-phone">
            <button id="show-dialog-messenger" type="button" class="mdl-button mdl-js-button mdl-button--fab mdl-button--colored">
                <i class="material-icons">add</i>
            </button>
            <dialog id="dialog-messenger" class="mdl-dialog">
                <div class="mdl-dialog__content">
                    <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
                        <input class="mdl-textfield__input" type="text" id="messenger-user" list="messenger-users">
                        <label class="mdl-textfield__label" for="messenger-user">Izaberi novog clana...</label>
                    </div>
                </div>
                <div class="mdl-dialog__actions">
                    <button type="button" class="mdl-button">Potvrdi</button>
                    <button type="button" class="mdl-button close" id="close-dialog">Zatvori</button>
                </div>
            </dialog>
        </div>
    </div>
</div>
<div id="messenger-wrapper">
    <div class="arrow"></div>
    <ul id="messenger-list" class="ChatLog">
    </ul>
</div>

<datalist id="messenger-users">
    @foreach (var m in Model.MemberThumbnails)
    {
        if (m.MemberId != MemberSession.GetMemberId())
        {
            <option data-id="@Html.DisplayName(m.MemberId.ToString())" value="@Html.DisplayName(m.Name)"></option>
        }
    }
</datalist>

<input
    type="hidden"
    data-senderId="@Html.DisplayName(MemberSession.GetMemberId().ToString())"
    value="@Html.DisplayName(MemberSession.GetMember().LastChatParticipant.ToString())"
    id="sender-data"/>

<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jqueryui/1/jquery-ui.min.js"></script>
<script type="text/javascript" src="https://use.fontawesome.com/c256757c6a.js"></script>
<script type="text/javascript">
    function convertUTCDateToLocalDate(date) {
        var newDate = new Date(date.getTime()+date.getTimezoneOffset()*60*1000);

        var offset = date.getTimezoneOffset() / 60;
        var hours = date.getHours();

        newDate.setHours(hours - offset);

        return newDate;   
    }

    function Messenger() {
        var self = this;

        self.inputStorage = document.getElementById("sender-data");

        self.receiverId = @Html.DisplayName(Model.Profile.LastChatParticipant.ToString());
        self.senderId = @Html.DisplayName(MemberSession.GetMemberId().ToString());

        self.senderUrl = "";
        self.receiverUrl = "";

        self.GetHtmlMessage = function(text, time, imgUrl, mine) {
            var myMessage = mine === undefined ? "" : "ChatLog__entry_mine";
            var myTime = mine === undefined ? "time-signature" : "time-signature_mine";
            var s =
                '<li class="ChatLog__entry ' + myMessage + '" data-label=' + time + '> ' +
                    ' <img class="ChatLog__avatar" src="' + imgUrl + '"/> ' +
                    '<p class="ChatLog__message">' +
                    '  <span class="time-info">' +
                    '<small class="' + myTime + '">' + time + '</small></span> ' +
                    ' ' + text + ' </p> ' +
                    ' </li>';

            return s;
        };
        self.RenderConversation = function(conversation) {
            $('#messenger-list').html("");
            self.PrintConversation(conversation);
        };
        self.PrintConversation = function(conversation) {
            $.each(conversation.OrderedMessages, function(i, elem) {
                var messageId = elem.MessageId;
                var text = elem.Text;
                //var time = elem.Time;
                //var date = new Date(parseInt(elem.Time.substr(6)));
                //var time = (new Date(parseInt(elem.Time.substr(6)))).format("dd-MM-yyyy");
                
                var jsonDate = elem.Time;  // returns "/Date(1245398693390)/"; 
                var re = /-?\d+/; 
                var m = re.exec(jsonDate); 
                var d = new Date(parseInt(m[0]));


                var time = d.toString().substring(0,24);
                var senderId = elem.SenderId;
                var receiverId = elem.ReceiverId;

                //if (receiverId !== self.receiverId) {
                    if (self.senderUrl === "" || self.receiverUrl === "") {
                        self.GetReceiverImgUrl();
                        self.GetSenderImgUrl();
                    }
                    if (self.senderUrl === self.receiverUrl) {
                        console.log("isti su");
                    }
                    if (senderId === self.senderId) {
                        var mesg = messenger.GetHtmlMessage(text, time, self.senderUrl, "Yes");
                        $('#messenger-list').prepend(mesg);
                    } else {
                        var mesgr = messenger.GetHtmlMessage(text, time, self.receiverUrl);
                        $('#messenger-list').prepend(mesgr);
                    }
                //}
            });
        };
        self.GetConversation = function() {
            var url = '@Url.Action("Conversation", "Messenger")';
            url += "/" + self.receiverId;

            $.post(url, function(data) {
                var conversation = JSON.parse(data);
                self.RenderConversation(conversation);
            });
        };
        self.GetSenderImgUrl = function() {
            var url = '@Url.Action("GetAvatar", "Member")';
            url += "/" + self.senderId;

            $.post(url, function(data) {
                self.senderUrl = data;
            });
        };
        self.GetReceiverImgUrl = function() {
            var url = '@Url.Action("GetAvatar", "Member")';
            url += "/" + self.receiverId;

            $.post(url, function(data) {
                self.receiverUrl = data;
            });
        };
        self.CheckNotification = function() {
            var url = '@Url.Action("GetNotifications", "Messenger")';
            url += "/" + messenger.receiverId;

            $.post(url, function(data) {
                if (data !== "False") {
                    // onda data predstavja JSON koji predstavlja listu ne updatovanih poruka
                    var lastConversation = JSON.parse(data);
                    self.PrintConversation(lastConversation);
                }
            });
        };
        self.AddMessage = function(text) {
            var url = '@Url.Action("SetMessage", "Messenger")';
            url += '/' + messenger.receiverId + '?text=' + text;


            $.post(url, function(data) { // snimi poruku u bazi, i postavi notifikaciju da bi mogao primalac sa druge strane da ocita
                var message = messenger.GetHtmlMessage(text, "Now", messenger.senderUrl, "Yes");
                $('#messenger-list').prepend(message); // postavi na zid
                console.log(data);
            });
        };
    }

    var messenger = new Messenger();

    $(window).bind('load', function() {
        messenger.GetSenderImgUrl();
        messenger.GetReceiverImgUrl();
        messenger.GetConversation();
    });

    window.setInterval(function() {
        
        messenger.CheckNotification();
    }, 1000);

    function eventFire(el, etype) {
        if (el.fireEvent) {
            el.fireEvent('on' + etype);
        } else {
            var evObj = document.createEvent('Events');
            evObj.initEvent(etype, true, false);
            el.dispatchEvent(evObj);
        }
    }

    $(function() {
        $('#messenger-user').on('input', function() { // choose new Receiver

            var opt = $('option[value="' + $(this).val() + '"]');

            if (opt.length && parseInt(opt.attr("data-id"))) {
                messenger.receiverId = parseInt(opt.attr("data-id"));
                messenger.GetReceiverImgUrl();
                messenger.GetConversation();

                eventFire(document.getElementById('close-dialog'), 'click');
            }
        });
    });


    var ENTER_CODE = 13;
    $('#messenger-message').bind('keypress', function(event) {
        var x = event.keyCode;
        if (x === ENTER_CODE) {
            messenger.AddMessage(this.value);

            this.value = "";
        }
    });


    // PopUp handler
    var dialogMessenger = document.querySelector('#dialog-messenger');
    var showDialogButtonMessenger = document.querySelector('#show-dialog-messenger');
    if (!dialogMessenger.showModal) {
        dialogPolyfill.registerDialog(dialog);
    }
    showDialogButtonMessenger.addEventListener('click', function() {
        dialogMessenger.showModal();
    });
    dialogMessenger.querySelector('.close').addEventListener('click', function() {
        dialogMessenger.close();
    });
    $('#messenger-wrapper').on('mouseenter', '.ChatLog__message', function() {
        this.children[0].style.display = 'block';
    });
    $('#messenger-wrapper').on('mouseleave', '.ChatLog__message', function() {
        this.children[0].style.display = 'none';
    });
</script>